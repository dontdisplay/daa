#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define MAX 100000

int a[MAX],b[MAX];


void Merge(int low, int mid, int high)
{
    int i, j, k, l;
    k = low;

    i = low;
    j = mid + 1;
    while ((i <= mid) && (j <= high))
    {
        if (a[i] <= a[j])
        {
            b[k] = a[i];
            i++;
        }
        else
        {
            b[k] = a[j];
            j++;
        }
        k++;
    }
    if (i > mid)
    {
        for (l = j; l <= high; l++)
        {
            b[k] = a[l];
            k++;
        }
    }
    else
    {
        for (l = i; l <= mid; l++)
        {
            b[k] = a[l];
            k++;
        }
    }
    for (k = low; k <= high; k++)
    {
        a[k] = b[k];
    }
}

void Mergesort(int low, int high)
{
    int mid;
    if (low < high)
    {
        mid = (low + high) / 2;
        Mergesort(low, mid);
        Mergesort(mid + 1, high);
        Merge(low, mid, high);
    }
}
int main(int argc, char *argv[])
{

    int n, i;
    printf("enter the number of elements\n");
    scanf("%d",&n);
     for (i = 0; i < n; i++)
    {
        a[i] = rand()%100;
    }

    printf("\nElements before sorting\n");
    for(i=0;i<n;i++)
    {
        printf("%d\t",a[i]);
    }

    clock_t t;
    t = clock();

    Mergesort(0,n-1);
    t = clock() - t;
    double time_taken = ((double)t) / CLOCKS_PER_SEC;

    printf("\nsorted array\n");
    for(i=0;i<n;i++)
    {
        printf("%d\t",b[i]);
    }

    printf("\nmergesort took %f seconds to execute \n", time_taken);
    return 0;
}
